#!/usr/bin/env python3

import gevent.monkey; gevent.monkey.patch_all()

# Suppress warnings when making requests using Requests package
# without proper SSL verification
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

import os
import sys
import yaml

from argh import arg, EntryPoint
from collections import OrderedDict
from inflection import humanize
from prompt_toolkit import prompt

from prime.bot.constants import OWNER_GROUP, ADMIN_GROUP
from prime.bot.groups import GroupsMixin
from prime.config.slack import SlackConfig
from prime.config.mattermost import MattermostConfig
from prime.mattermost.bot import MattermostBot
from prime.slack.bot import SlackBot
from prime.storage.local_storage import (
    USER_DIR,
    CONFIG_FILE_PATH,
    USER_COMMANDS_DIR,
    USER_LISTENERS_DIR,
    USER_JOBS_DIR,
    USER_FIXTURES_DIR,
    DB_DIR
)

HEADER = """
    ____       _
   / __ \_____(_)___ ___  ___
  / /_/ / ___/ / __ `__ \/ _ \\
 / ____/ /  / / / / / / /  __/
/_/   /_/  /_/_/ /_/ /_/\___/
"""
ALL_CONFIGS = (SlackConfig, MattermostConfig,)

app = EntryPoint('Prime')

@app
def init():
    # Make user configuration directory
    for d in (
            USER_DIR,
            USER_COMMANDS_DIR,
            USER_LISTENERS_DIR,
            USER_JOBS_DIR,
            USER_FIXTURES_DIR,
            DB_DIR
    ):
        if not os.path.exists(d):
            os.makedirs(d)

    if not os.path.exists(CONFIG_FILE_PATH):
        cfg = {}
        try:
            for config in ALL_CONFIGS:
                for f in config.get_field_definitions():
                    msg = '{} [{}]: '.format(humanize(f.name), f.default)
                    value = prompt(msg)
                    cfg[f.name] = value
        except KeyboardInterrupt:
            return

        with open(CONFIG_FILE_PATH, 'w') as cfg_file:
            cfg_file.write(yaml.dump(cfg, default_flow_style=False))

        print('Congratulations! You have successfully configured Prime.')
    else:
        print('You already have a configuration file.',
              'You may edit it at %r.' % CONFIG_FILE_PATH)

@app
@arg('--slack-token', help='API key to authenticate with the Slack RTM API.')
def slack(**kwargs):
    print(HEADER)

    cfg = SlackConfig.from_user_settings(**kwargs)
    bot = SlackBot(cfg)
    bot.start()
    bot.join()

@app
@arg('-u', '--mattermost-url', help='URL of Mattermost server.')
@arg('-t', '--mattermost-team', help='Mattermost team to connect to.')
@arg('-e', '--mattermost-email',
     help='Email account to log in to Mattermost server with.')
@arg('-p', '--mattermost-password',
     help='Password of account to log in to Mattermost server with.')
def mattermost(**kwargs):
    print(HEADER)

    cfg = MattermostConfig.from_user_settings(**kwargs)
    bot = MattermostBot(cfg)
    bot.start()
    bot.join()


if __name__ == '__main__':
    app()
