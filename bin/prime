#!/usr/bin/env python3

import os
import sys
import yaml

from argh import arg
from argh.dispatching import dispatch_commands
from collections import OrderedDict
from prime.api.notify import PrimeNotifyAPI
from prime.bot.constants import OWNER_GROUP, ADMIN_GROUP
from prime.bot.groups import GroupsMgr
from prime.slack.bot import SlackBot
from prime.storage.local_storage import (
    USER_DIR,
    USER_COMMANDS_DIR,
    USER_LISTENERS_DIR
)

CONFIG_FILE_PATH = os.path.join(USER_DIR, 'config.yml')
DEFAULT_CONFIG = OrderedDict([
    ('host', '127.0.0.1'),
    ('port', '8000'),
    ('token', ''),
    ('to', 'default'),
    ('cert', ''),
    ('slack_token', ''),
])

def get_config():
    try:
        with open(CONFIG_FILE_PATH, 'r') as cfg_file:
            return yaml.load(cfg_file)
    except:
        return DEFAULT_CONFIG

def init():
    # Make user configuration directory
    for d in (USER_DIR, USER_COMMANDS_DIR, USER_LISTENERS_DIR,):
        if not os.path.exists(d):
            os.makedirs(d)

    if not os.path.exists(CONFIG_FILE_PATH):
        cfg = {}
        try:
            for prompt, value in DEFAULT_CONFIG.items():
                cfg[prompt] = input('{0} [{1}]: '.format(
                    prompt.capitalize(),
                    value
                )) or value
        except KeyboardInterrupt:
            return

        with open(CONFIG_FILE_PATH, 'w') as cfg_file:
            cfg_file.write(yaml.dump(cfg, default_flow_style=False))

        print('Congratulations! You have successfully configured Prime.')
    else:
        print('You already have a configuration file.',
              'You may edit it at %r.' % CONFIG_FILE_PATH)

@arg('--host', help='Host address of the Services master.')
@arg('--port', help='Port that the Services master will be listening on.')
@arg('--token', help='API key to authenticate with Services master.')
@arg('--to', help='Route to send messages to.')
@arg('--cert', help='Path to certificate file for SSL verification.')
@arg('text', nargs='*')
def notify(text, host=None, port=None, token=None, to=None, cert=None):
    cfg = get_config()
    notifier = PrimeNotifyAPI(host=host or cfg.get('host'),
                              port=port or cfg.get('port'),
                              token=token or cfg.get('token'),
                              cert=cert or cfg.get('cert') or False)
    notifier(text=' '.join(text), to=(to or cfg.get('to')).split(','))

@arg('--token', help='API key to authenticate with the Slack RTM API.')
def slack(token=None):
    print(
        '    ____       _\n'
        '   / __ \_____(_)___ ___  ___\n'
        '  / /_/ / ___/ / __ `__ \/ _ \\\n'
        ' / ____/ /  / / / / / / /  __/\n'
        '/_/   /_/  /_/_/ /_/ /_/\___/\n\n',
        file=sys.stderr
    )
    token = token or get_config().get('slack_token')
    if not token:
        print('No Slack Bot API token specified.', file=sys.stderr)
    else:
        bot = SlackBot(token)
        try:
            bot.start()
            bot.join()
        except KeyboardInterrupt:
            bot.stop()

def createsuperuser(user):
    mgr = GroupsMgr()
    mgr.add_user_to_group(user, OWNER_GROUP)
    mgr.add_user_to_group(user, ADMIN_GROUP)
    print(user, 'added as a superuser.', file=sys.stderr)

if __name__ == '__main__':
    dispatch_commands([init, notify, slack, createsuperuser])
