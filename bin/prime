#!/usr/bin/env python3

import gevent.monkey; gevent.monkey.patch_all()

import os
import sys
import yaml

from argh import arg, EntryPoint
from collections import OrderedDict

from prime.bot.constants import OWNER_GROUP, ADMIN_GROUP
from prime.bot.groups import GroupsMgr
from prime.slack.bot import SlackBot
from prime.storage.local_storage import (
    USER_DIR,
    USER_COMMANDS_DIR,
    USER_LISTENERS_DIR,
    USER_JOBS_DIR
)

HEADER = """
    ____       _
   / __ \_____(_)___ ___  ___
  / /_/ / ___/ / __ `__ \/ _ \\
 / ____/ /  / / / / / / /  __/
/_/   /_/  /_/_/ /_/ /_/\___/
"""
CONFIG_FILE_PATH = os.path.join(USER_DIR, 'config.yml')
DEFAULT_CONFIG = OrderedDict([
    ('slack_token', ''),
])

def get_config():
    try:
        with open(CONFIG_FILE_PATH, 'r') as cfg_file:
            return yaml.load(cfg_file)
    except:
        return DEFAULT_CONFIG

app = EntryPoint('Prime')

@app
def init():
    # Make user configuration directory
    for d in (
            USER_DIR,
            USER_COMMANDS_DIR,
            USER_LISTENERS_DIR,
            USER_JOBS_DIR,
    ):
        if not os.path.exists(d):
            os.makedirs(d)

    if not os.path.exists(CONFIG_FILE_PATH):
        cfg = {}
        try:
            for prompt, value in DEFAULT_CONFIG.items():
                cfg[prompt] = input('{0} [{1}]: '.format(
                    prompt.replace('_', ' ').title(),
                    value
                )) or value
        except KeyboardInterrupt:
            return

        with open(CONFIG_FILE_PATH, 'w') as cfg_file:
            cfg_file.write(yaml.dump(cfg, default_flow_style=False))

        print('Congratulations! You have successfully configured Prime.')
    else:
        print('You already have a configuration file.',
              'You may edit it at %r.' % CONFIG_FILE_PATH)

@app
@arg('--token', help='API key to authenticate with the Slack RTM API.')
def slack(token=None):
    print(HEADER)
    token = token or get_config().get('slack_token')
    if not token:
        print('No Slack Bot API token specified.', file=sys.stderr)
    else:
        bot = SlackBot(token)
        bot.start()
        bot.join()

@app
def createsuperuser(user):
    mgr = GroupsMgr()
    mgr.add_user_to_group(user, OWNER_GROUP)
    mgr.add_user_to_group(user, ADMIN_GROUP)
    print(user, 'added as a superuser.')

if __name__ == '__main__':
    app()
